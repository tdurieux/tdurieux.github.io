(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{249:function(a,s,e){"use strict";e.r(s);var t=e(2),n=Object(t.a)({},function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"nopol"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nopol","aria-hidden":"true"}},[a._v("#")]),a._v(" Nopol")]),a._v(" "),e("p",[e("img",{attrs:{src:"/projects/nopol.png",alt:"nopol.png"}}),a._v("\nNopol is an automatic software repair tool for Java. This code is research code, released under the GPL licence.\nIf you use this code for academic research, please cite: "),e("a",{attrs:{href:"https://hal.archives-ouvertes.fr/hal-01285008/document",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("Nopol: Automatic Repair of Conditional Statement Bugs in Java Programs")]),e("OutboundLink")],1),a._v(" (Jifeng Xuan, Matias Martinez, Favio Demarco, Maxime Clément, Sebastian Lamelas, Thomas Durieux, Daniel Le Berre, Daniel Le Berre, Martin Monperrus). IEEE Transactions on Software Engineering, 2016.")]),a._v(" "),e("div",{staticClass:"language-latex line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-latex"}},[e("code",[a._v("@article"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("xuan:hal-01285008,\n title = "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("Nopol: Automatic Repair of Conditional Statement Bugs in Java Programs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(",\n author = "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("Xuan, Jifeng and Martinez, Matias and Demarco, Favio and Clément, Maxime and Lamelas, Sebastian and Durieux, Thomas and Le Berre, Daniel and Monperrus, Martin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(",\n journal = "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("IEEE Transactions on Software Engineering"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(",\n year = "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("2016"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(",\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("Others papers about Nopol:")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://hal.inria.fr/hal-00977798/PDF/NOPOL-Automatic-Repair-of-Buggy-If-Conditions-and-Missing-Preconditions-with-SMT.pdf",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v('"Automatic Repair of Buggy If Conditions and Missing Preconditions with SMT"')]),e("OutboundLink")],1),a._v(" (Favio DeMarco, Jifeng Xuan, Daniel Le Berre, Martin Monperrus), In Proceedings of the 6th International Workshop on Constraints in Software Testing, Verification, and Analysis (CSTVA 2014) "),e("a",{attrs:{href:"http://www.monperrus.net/martin/bibtexbrowser.php?key=DeMarco2014&bib=monperrus.bib",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("(Bibtex)")]),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://hal.archives-ouvertes.fr/hal-01279233/document",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("DynaMoth: Dynamic Code Synthesis for Automatic Program Repair")]),e("OutboundLink")],1),a._v(" (Thomas Durieux, Martin Monperrus), In Proceedings of the 11th International Workshop in Automation of Software Test, 2016, describes the dynamic synthesis part of Nopol "),e("a",{attrs:{href:"http://www.monperrus.net/martin/bibtexbrowser.php?key=durieux%3Ahal-01279233&bib=monperrus.bib",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("(Bibtex)")]),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://arxiv.org/pdf/1504.05078.pdf",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("Automatic Repair of Infinite Loops")]),e("OutboundLink")],1),a._v(" (Sebastian Lamelas-Marcote and Martin Monperrus), Technical report hal-01144026, University of Lille, 2015, describes the Infinitel part. "),e("a",{attrs:{href:"http://www.monperrus.net/martin/bibtexbrowser.php?key=Lamelas2015&bib=monperrus.bib",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("(Bibtex)")]),e("OutboundLink")],1)])]),a._v(" "),e("h2",{attrs:{id:"getting-started"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getting-started","aria-hidden":"true"}},[a._v("#")]),a._v(" "),e("strong",[a._v("Getting started")])]),a._v(" "),e("p",[a._v("Nopol requires Java and an SMT solver installed on the machine (e.g. Z3)")]),a._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://github.com/SpoonLabs/CoCoSpoon",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[a._v("CoCoSpoon")]),e("OutboundLink")],1),a._v(" :")])]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/SpoonLabs/CoCoSpoon.git\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" CoCoSpoon\nmvn clean "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("ol",[e("li",[a._v("Compile NoPol:")])]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/SpoonLabs/nopol.git\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" nopol/nopol\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("export")]),a._v(" JAVA_HOME"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/usr/lib/jvm/java-7-openjdk-amd64\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -DskipTests is required, to run the tests one needs to compile ../test-projects/ (see below)")]),a._v("\nmvn package -DskipTests\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("ol",[e("li",[a._v("Locate the Nopol jar file produced at step 2)")])]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" target/*jar\ntarget/nopol-0.2-SNAPSHOT.jar\ntarget/nopol-0.2-SNAPSHOT-jar-with-dependencies.jar "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# we use this one")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("In the following, "),e("code",[a._v("nopol.jar")]),a._v(" refers to the jar file with dependencies ( "),e("code",[a._v("target/nopol-<VERSION>-SNAPSHOT-jar-with-dependencies.jar")]),a._v(" )")]),a._v(" "),e("ol",[e("li",[a._v("Compile the test-projects")])]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/test-projects/\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# compiling app (in target/classes) and tests (in target/test-classes), but don't run the tests (they obviously fail, because the goal is to repair them)")]),a._v("\nmvn "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),a._v(" -DskipTests\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("4b) Optional: run the tests of Nopol to check your installation")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/nopol/\nmvn "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("ol",[e("li",[a._v("Execute Nopol (parameters explained below)")])]),a._v(" "),e("p",[a._v("(Long commands are broken in several lines, separated by a backslash, which means an escaped linebreak in Unix shells.)")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cd")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/test-projects/\njava -jar nopol.jar \\\n-s src/main/java/ \\\n-c target/classes:target/test-classes:/home/"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("/.m2/repository/junit/junit/4.11/junit-4.11.jar:/home/"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar \\\n-t symbolic_examples.symbolic_example_1.NopolExampleTest \\\n-p "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/nopol/lib/z3/z3_for_linux\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("If you keep "),e("code",[a._v("nopol.jar")]),a._v(" instead of the actual jar located at the previous step, you'll get "),e("code",[a._v("Error: unable to access jarfile nopol.jar")]),a._v(" (see above). You should replace also "),e("code",[a._v("<user>")]),a._v(" by your own username.\nIt should output something like:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("---INFORMATION----\nNb classes : 34\nNb methods : 53\nNb statements: 5\nNb statement executed by the passing tests of the patched line: 0\nNb statement executed by the failing tests of the patched line: 0\nNb unit tests : 9\nNb Statements Analyzed : 3\nNb Statements with Angelic Value Found : 1\nNb inputs in SMT : 8\nNb SMT level: 2\nNb SMT components: [4] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2] class java.lang.Boolean: 4\nNb variables in SMT : 13\nNb run failing test : [2, 1]\nNb run passing test : [4, 18]\nNoPol Execution time : 3262ms\n----PATCH FOUND----\nsymbolic_examples.symbolic_example_1.NopolExample:12: CONDITIONAL index < 1\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br")])]),e("p",[a._v("NoPol (SMT and Dynamoth) returns also a unix code (integer):")]),a._v(" "),e("ul",[e("li",[a._v("0 if a patch has been found")]),a._v(" "),e("li",[a._v("1 otherwise")])]),a._v(" "),e("p",[a._v("Parameter "),e("code",[a._v("-c")]),a._v(" can be found with "),e("code",[a._v("mvn dependency:build-classpath")]),a._v(" .")]),a._v(" "),e("h2",{attrs:{id:"minimal-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minimal-usage","aria-hidden":"true"}},[a._v("#")]),a._v(" "),e("strong",[a._v("Minimal Usage")])]),a._v(" "),e("p",[a._v("4 parameters are required")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("Usage: java -jar nopol.jar\n\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("-s"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("--source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" source1:source2:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".:sourceN \n        Define the path to the "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("source")]),a._v(" code of the project. For instance "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("src/main/java"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("-c"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("--classpath"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("classpath"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n        Define the classpath of the project separated by a path separator "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" on Linux"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(". \n        Must contain the application binary classes "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("target/classes"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        Must contain the application "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),a._v(" classes "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("target/test-classes"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        Must contain the library classes "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("lib/junit.jar"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        \n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("-t"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("--test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" test1:test2:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".:testN "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        Define the tests of the project. For instance "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("symbolic_examples.symbolic_example_1.NopolExampleTest"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("-p"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("--solver-path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("solverPath"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        Define the solver binary path "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("only used with smt synthesis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(". For instance "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/nopol/lib/z3/z3_for_linux"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br")])]),e("h2",{attrs:{id:"advanced-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#advanced-usage","aria-hidden":"true"}},[a._v("#")]),a._v(" "),e("strong",[a._v("Advanced Usage")])]),a._v(" "),e("p",[a._v("See also notes below.")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('Usage: java -jar nopol.jar\n\n  [(-m|--mode) <repair|ranking>]\n        Define the mode of execution. (default: repair)\n\n  [(-e|--type) <pre_then_cond|condition|precondition>]\n        The type of statement to analyze (only used with repair mode). (default: pre_then_cond)\n\n  [(-o|--oracle) <angelic|symbolic>]\n        Define the oracle (only used with repair mode). (default: angelic)\n\n  [(-y|--synthesis) <smt|dynamoth>]\n        Define the patch synthesis. (default: smt)\n\n  [(-l|--solver) <z3|cvc4>]\n        Define the solver (only used with smt synthesis). (default: z3)\n\n  [--complianceLevel <complianceLevel>]\n        The Java version of the project. (default: 7)\n\n  [--maxTime <maxTime>]\n        The maximum time execution in minute for the whole execution of Nopol.(default: 10)\n\n  [--maxTimeType <maxTimeType>]\n        The maximum time execution in minute for one type of patch per per suspicious statement (eg. 5 minutes max to find a precondition at line x). (default: 5)\n\n  [(-z|--flocal) < cocospoon|dumb|gzoltar>]\n        Define the fault localizer to be used. (default: cocospoon). \n          "cocospoon" means source code instrumentation plus ochiai metric.\n          "dumb" means random fault localization. \n          "gzoltar" means binary code instrumentation with external library plus ochiai metric.\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br")])]),e("p",[a._v("Notes: For using Dynamoth ( "),e("code",[a._v("-y dynamoth")]),a._v(" ), you must add tools.jar in the classpath of Nopol, and use java with "),e("code",[a._v("-cp")]),a._v(" (and not "),e("code",[a._v("-jar")]),a._v(" ):")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("java -cp "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_HOME")]),a._v("/lib/tools.jar:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("/nopol/target/nopol-SNAPSHOT-jar-with-dependencies.jar fr.inria.lille.repair.Main "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("nopol arguments"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])])])},[],!1,null,null,null);s.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{256:function(e,t,r){"use strict";r.r(t);var a=r(2),s=Object(a.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"a-comprehensive-study-of-automatic-program-repair-on-the-quixbugs-benchmark"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#a-comprehensive-study-of-automatic-program-repair-on-the-quixbugs-benchmark","aria-hidden":"true"}},[e._v("#")]),e._v(" A Comprehensive Study of Automatic Program Repair on the QuixBugs Benchmark")]),e._v(" "),r("p",[e._v("Proceedings of International Workshop on Intelligent Bug Fixing ("),r("em",[e._v("IBF'19")]),e._v(")")]),e._v(" "),e._l(this.$page.frontmatter.authors,function(e){return r("Author",{key:e.lastname,attrs:{lastname:e.lastname,firstname:e.firstname,url:e.url}})}),e._v(" "),e._v(" "),r("p",[r("a",{attrs:{href:"https://arxiv.org/abs/1805.03454",target:"_blank",rel:"noopener noreferrer"}},[e._v("PDF"),r("OutboundLink")],1),e._v(" • "),r("a",{attrs:{href:"https://doi.org/10.1109/IBF.2019.8665475",target:"_blank",rel:"noopener noreferrer"}},[e._v("DOI"),r("OutboundLink")],1),e._v(" • "),r("a",{attrs:{href:"https://github.com/KTH/quixbugs-experiment",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source code"),r("OutboundLink")],1)]),e._v(" "),r("h2",{attrs:{id:"abstract"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#abstract","aria-hidden":"true"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),r("p",[e._v("Automatic program repair papers tend to repeatedly use the same benchmarks. This poses a threat to the external validity of the findings of the program repair research community. In this paper, we perform an automatic repair experiment on a benchmark called QuixBugs that has never been studied in the context of program repair. In this study, we report on the characteristics of QuixBugs, and study five repair systems, Arja, Astor, Nopol, NPEfix and RSRepair, which are representatives of generate-and-validate repair techniques and synthesis repair techniques. We propose three patch correctness assessment techniques to comprehensively study overfitting and incorrect patches. Our key results are: 1) 15/40 buggy programs in the QuixBugs can be repaired with a test-suite adequate patch; 2) a total of 64 plausible patches for those 15 buggy programs in the QuixBugs are present in the search space of the considered tools; 3) the three patch assessment techniques discard in total 33/64 patches that are overfitting. This sets a baseline for future research of automatic repair on QuixBugs. Our experiment also highlights the major properties and challenges of how to perform automated correctness assessment of program repair patches. All experimental results are publicly available on Github in order to facilitate future research on automatic program repair.")]),e._v(" "),r("div",{staticClass:"language-bibtex line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@inproceedings{IBF19p1,\nauthor = {He Ye and Matias Martinez and Thomas Durieux and Martin Monperrus},\ntitle = {A Comprehensive Study of Automatic Program Repair on the QuixBugs Benchmark},\nbooktitle = {Proc.\\ IBF},\npublisher = {IEEE},\npages = {1--10},\ndoi = {},\nyear = {2019}\n}\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br")])])],2)},[],!1,null,null,null);t.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{270:function(e,t,a){"use strict";a.r(t);var r=a(2),s=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"coverage-based-debloating-for-java-bytecode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coverage-based-debloating-for-java-bytecode","aria-hidden":"true"}},[e._v("#")]),e._v(" Coverage-Based Debloating for Java Bytecode")]),e._v(" "),a("p",[e._v("ACM Transactions on Software Engineering and Methodology ("),a("em",[e._v("TOSEM")]),e._v(")")]),e._v(" "),e._l(this.$page.frontmatter.authors,function(e){return a("Author",{key:e.lastname,attrs:{lastname:e.lastname,firstname:e.firstname,url:e.url}})}),e._v(" "),e._v(" "),a("p",[e._v("• "),a("a",{attrs:{href:"https://doi.org/10.1145/3546948",target:"_blank",rel:"noopener noreferrer"}},[e._v("DOI"),a("OutboundLink")],1),e._v(" • "),a("a",{attrs:{href:"https://github.com/castor-software/jdbl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source code"),a("OutboundLink")],1),e._v(" • "),a("a",{attrs:{href:"https://github.com/castor-software/jdbl-experiments/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Experiment Results"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract","aria-hidden":"true"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("Software bloat is code that is packaged in an application but is actually not necessary to run the application. The presence of software bloat is an issue for security, for performance, and for maintenance. In this paper, we introduce a novel technique for debloating, which we call coverage-based debloating. We implement the technique for one single language: Java bytecode. We leverage a combination of state-of-the-art Java bytecode coverage tools to precisely capture what parts of a project and its dependencies are used when running with a specific workload. Then, we automatically remove the parts that are not covered, in order to generate a debloated version of the project. We succeed to debloat 211 library versions from a dataset of 94 unique open-source Java libraries. The debloated versions are syntactically correct and preserve their original behavior according to the workload. Our results indicate that 68.3 % of the libraries’ bytecode and 20.3 % of their total dependencies can be removed through coverage-based debloating. For the first time in the literature on software debloating, we assess the utility of debloated libraries with respect to client applications that reuse them. We select 988 client projects that either have a direct reference to the debloated library in their source code or which test suite covers at least one class of the libraries that we debloat. Our results show that 81.5 % of the clients, with at least one test that uses the library, successfully compile and pass their test suite when the original library is replaced by its debloated version.")]),e._v(" "),a("div",{staticClass:"language-bibtex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@article{10.1145/3546948,\nauthor = {Soto-Valero, C\\'{e}sar and Durieux, Thomas and Harrand, Nicolas and Baudry, Benoit},\ntitle = {Coverage-Based Debloating for Java Bytecode},\nyear = {2023},\nissue_date = {March 2023},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {32},\nnumber = {2},\nissn = {1049-331X},\nurl = { https://doi.org/10.1145/3546948 },\ndoi = {10.1145/3546948},\nabstract = {Software bloat is code that is packaged in an application but is actually not necessary to run the application. The presence of software bloat is an issue for security, performance, and for maintenance. In this article, we introduce a novel technique for debloating, which we call coverage-based debloating. We implement the technique for one single language: Java bytecode. We leverage a combination of state-of-the-art Java bytecode coverage tools to precisely capture what parts of a project and its dependencies are used when running with a specific workload. Then, we automatically remove the parts that are not covered, in order to generate a debloated version of the project. We succeed to debloat 211 library versions from a dataset of 94 unique open-source Java libraries. The debloated versions are syntactically correct and preserve their original behaviour according to the workload. Our results indicate that 68.3\\% of the libraries’ bytecode and 20.3\\% of their total dependencies can be removed through coverage-based debloating.For the first time in the literature on software debloating, we assess the utility of debloated libraries with respect to client applications that reuse them. We select 988 client projects that either have a direct reference to the debloated library in their source code or which test suite covers at least one class of the libraries that we debloat. Our results show that 81.5\\% of the clients, with at least one test that uses the library, successfully compile and pass their test suite when the original library is replaced by its debloated version.},\njournal = {ACM Trans. Softw. Eng. Methodol.},\nmonth = {apr},\narticleno = {38},\nnumpages = {34},\nkeywords = {software maintenance, code coverage, Software bloat, bytecode, program specialization}\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br")])])],2)},[],!1,null,null,null);t.default=s.exports}}]);
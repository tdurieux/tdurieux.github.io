(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{266:function(e,t,a){"use strict";a.r(t);var r=a(2),i=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"exhaustive-exploration-of-the-failure-oblivious-computing-search-space"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exhaustive-exploration-of-the-failure-oblivious-computing-search-space","aria-hidden":"true"}},[e._v("#")]),e._v(" Exhaustive Exploration of the Failure-oblivious Computing Search Space")]),e._v(" "),a("p",[e._v("Proceedings of the 11th IEEE Conference on Software Testing, Validation and Verification, Main track ("),a("em",[e._v("ICST'18")]),e._v(")")]),e._v(" "),e._l(this.$page.frontmatter.authors,function(e){return a("Author",{key:e.lastname,attrs:{lastname:e.lastname,firstname:e.firstname,url:e.url}})}),e._v(" "),e._v(" "),a("p",[a("a",{attrs:{href:"https://arxiv.org/abs/1710.09722",target:"_blank",rel:"noopener noreferrer"}},[e._v("PDF"),a("OutboundLink")],1),e._v(" • "),a("a",{attrs:{href:"https://doi.org/10.1109/ICST.2018.00023",target:"_blank",rel:"noopener noreferrer"}},[e._v("DOI"),a("OutboundLink")],1),e._v(" • "),a("a",{attrs:{href:"https://durieux.me/slide_failure_oblivious_search_space.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Slide"),a("OutboundLink")],1),e._v(" • "),a("a",{attrs:{href:"https://github.com/Spirals-Team/runtime-repair-experiments",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source code"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract","aria-hidden":"true"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("High-availability of software systems requires automated handling of crashes in presence of errors. Failure-oblivious computing is one technique that aims to achieve high availability. We note that failure-obliviousness has not been studied in depth yet, and there is very few study that helps understand why failure-oblivious techniques work. In order to make failure-oblivious computing to have an impact in practice, we need to deeply understand failure-oblivious behaviors in software. In this paper, we study, design and perform an experiment that analyzes the size and the diversity of the failure-oblivious behaviors. Our experiment consists of exhaustively computing the search space of 16 field failures of large-scale open-source Java software. The outcome of this experiment is a much better understanding of what really happens when failure-oblivious computing is used, and this opens new promising research directions.")]),e._v(" "),a("div",{staticClass:"language-bibtex line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@inproceedings{durieux2017exhaustive,\nauthor = {Durieux, Thomas and Hamadi, Youssef and Yu, Zhongxing and Monperrus, Martin},\nbooktitle = {Proceedings of the 11th International Conference on Software Testing, Validation and Verification (ICST)},\norganization = {IEEE},\ntitle = {Exhaustive Exploration of the Failure-oblivious Computing Search Space},\nyear = {2018}\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])])],2)},[],!1,null,null,null);t.default=i.exports}}]);